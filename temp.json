{
    "connecting": false,
    "_hadError": false,
    "_handle":  {
        "reading": true,
        "onread": ,
        onconnection: null,
        _consumed: true,
        [Symbol(owner)]: [Circular]
    },
    _parent: null,
    _host: null,
    _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList {
            head: null,
            tail: null,
            length: 0
        },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        emitClose: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null
    },
    readable: true,
    _events: {
        end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
        ],
        drain: [
            [Function: ondrain],
            [Function: bound socketOnDrain]
        ],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [
            [Function: bound socketOnClose],
            [Function: onServerResponseClose]
        ],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: {
            next: null,
            entry: null,
            finish: [Function: bound onCorkedFinish]
        }
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
        _events: {
            request: [EventEmitter],
            connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
            reading: false,
            onread: null,
            onconnection: [Function: onconnection],
            [Symbol(owner)]: [Circular]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::5000',
        [Symbol(IncomingMessage)]: {
            [Function: IncomingMessage] super_: [Function]
        },
        [Symbol(ServerResponse)]: {
            [Function: ServerResponse] super_: [Function]
        },
        [Symbol(asyncId)]: 6
    },
    _server: Server {
        _events: {
            request: [EventEmitter],
            connection: [Function: connectionListener]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
            reading: false,
            onread: null,
            onconnection: [Function: onconnection],
            [Symbol(owner)]: [Circular]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::5000',
        [Symbol(IncomingMessage)]: {
            [Function: IncomingMessage] super_: [Function]
        },
        [Symbol(ServerResponse)]: {
            [Function: ServerResponse] super_: [Function]
        },
        [Symbol(asyncId)]: 6
    },
    timeout: 120000,
    parser: HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: IncomingMessage {
            _readableState: [ReadableState],
            readable: false,
            _events: [Object],
            _eventsCount: 2,
            _maxListeners: undefined,
            socket: [Circular],
            connection: [Circular],
            httpVersionMajor: 1,
            httpVersionMinor: 1,
            httpVersion: '1.1',
            complete: true,
            headers: [Object],
            rawHeaders: [Array],
            trailers: {},
            rawTrailers: [],
            aborted: false,
            upgrade: false,
            url: '/',
            method: 'POST',
            statusCode: null,
            statusMessage: null,
            client: [Circular],
            _consuming: true,
            _dumped: false,
            next: [Function: next],
            baseUrl: '',
            originalUrl: '/',
            _parsedUrl: [Url],
            params: {},
            query: {},
            res: [ServerResponse],
            body: [Object],
            route: [Route]
        },
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming]
    },
    on: [Function: socketOnWrap],
    _paused: false,
    _httpMessage: ServerResponse {
        _events: {
            finish: [Function: bound resOnFinish]
        },
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: IncomingMessage {
            _readableState: [ReadableState],
            readable: false,
            _events: [Object],
            _eventsCount: 2,
            _maxListeners: undefined,
            socket: [Circular],
            connection: [Circular],
            httpVersionMajor: 1,
            httpVersionMinor: 1,
            httpVersion: '1.1',
            complete: true,
            headers: [Object],
            rawHeaders: [Array],
            trailers: {},
            rawTrailers: [],
            aborted: false,
            upgrade: false,
            url: '/',
            method: 'POST',
            statusCode: null,
            statusMessage: null,
            client: [Circular],
            _consuming: true,
            _dumped: false,
            next: [Function: next],
            baseUrl: '',
            originalUrl: '/',
            _parsedUrl: [Url],
            params: {},
            query: {},
            res: [Circular],
            body: [Object],
            route: [Route]
        },
        locals: {},
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: {
            'x-powered-by': [Array]
        }
    },
    [Symbol(asyncId)]: 19,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2267,
        _onTimeout: [Function: bound],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 20,
        [Symbol(triggerId)]: 19
    },
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
}